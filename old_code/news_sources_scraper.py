import requests
import csv
import os
import time
from bs4 import BeautifulSoup
from urllib.parse import quote_plus
import pandas as pd

def ensure_directory_exists(directory_path):
    """Ensure the specified directory exists, creating it if necessary."""
    if not os.path.exists(directory_path):
        os.makedirs(directory_path)
        print(f"Created directory: {directory_path}")

def search_for_url(source_name):
    """
    Search for the URL of a news source using a search engine.
    Returns the most likely official URL.
    """
    try:
        # Use DuckDuckGo as it has less strict rate limiting
        search_query = f"{source_name} official website"
        encoded_query = quote_plus(search_query)
        url = f"https://html.duckduckgo.com/html/?q={encoded_query}"
        
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.5',
        }
        
        response = requests.get(url, headers=headers)
        soup = BeautifulSoup(response.text, 'html.parser')
        
        # Extract the first result
        results = soup.select('.result__url')
        if results:
            # Get the URL text and clean it
            url_text = results[0].get_text().strip()
            # Convert to proper URL format if needed
            if not url_text.startswith(('http://', 'https://')):
                url_text = 'https://' + url_text
            return url_text
        
        return "URL not found"
    
    except Exception as e:
        print(f"Error searching for {source_name}: {str(e)}")
        return "Error retrieving URL"

def get_news_source_urls(source_names, output_csv_path):
    """
    Get URLs for a list of news sources using a predefined mapping.
    
    Args:
        source_names (list): List of news source names
        output_csv_path (str): Path to save the CSV file
    """
    # Create a dictionary of known news sources and their URLs
    known_urls = {
        "24/7 Wall St.": "https://247wallst.com/",
        "Above Avalon": "https://www.aboveavalon.com/",
        "ACCESSWIRE": "https://www.accesswire.com/",
        "Agriculture Dive": "https://www.agriculturedive.com/",
        "Air Cargo World": "https://aircargoworld.com/",
        "American Banker": "https://www.americanbanker.com/",
        "American City Business Journals": "https://www.bizjournals.com/",
        "AP": "https://apnews.com/",
        "AP Finance": "https://apnews.com/hub/financial-markets",
        "AppleInsider": "https://appleinsider.com/",
        "Argus Research": "https://www.argusresearch.com/",
        "Associated Press": "https://apnews.com/",
        "Associated Press Finance": "https://apnews.com/hub/financial-markets",
        "Autoblog": "https://www.autoblog.com/",
        "Automotive Dive": "https://www.automotivedivenews.com/",
        "Automotive News": "https://www.autonews.com/",
        "Banking Dive": "https://www.bankingdive.com/",
        "Barron's Online": "https://www.barrons.com/",
        "Barrons.com": "https://www.barrons.com/",
        "Benzinga": "https://www.benzinga.com/",
        "BioPharma Dive": "https://www.biopharmadive.com/",
        "bizjournals.com": "https://www.bizjournals.com/",
        "Black Enterprise": "https://www.blackenterprise.com/",
        "Bloomberg": "https://www.bloomberg.com/",
        "Bloomberg Video": "https://www.bloomberg.com/video",
        "Briefing.com": "https://www.briefing.com/",
        "Business Insider": "https://www.businessinsider.com/",
        "Business Wire": "https://www.businesswire.com/",
        "BusinessWeek": "https://www.bloomberg.com/businessweek",
        "CFO Dive": "https://www.cfodive.com/",
        "CFO.com": "https://www.cfo.com/",
        "Chain Store Age": "https://chainstoreage.com/",
        "CIO Dive": "https://www.ciodive.com/",
        "Clinical Trials Arena": "https://www.clinicaltrialsarena.com/",
        "CNBC": "https://www.cnbc.com/",
        "CNBC TV": "https://www.cnbc.com/tv/",
        "CNBC Videos": "https://www.cnbc.com/video/",
        "CNN Business": "https://www.cnn.com/business",
        "CNNMoney.com": "https://money.cnn.com/",
        "CoinDesk": "https://www.coindesk.com/",
        "CoinMarketCap": "https://coinmarketcap.com/",
        "Commercial Observer": "https://commercialobserver.com/",
        "Construction Dive": "https://www.constructiondive.com/",
        "CorpGov.com": "https://corpgov.com/",
        "C-Store Dive": "https://www.cstoredive.com/",
        "CX Dive": "https://www.cxdive.com/",
        "Cybersecurity Dive": "https://www.cybersecuritydive.com/",
        "DailyFX": "https://www.dailyfx.com/",
        "Deadline": "https://deadline.com/",
        "Design & Development Today": "https://www.designdevelopmenttoday.com/",
        "DigiTimes": "https://www.digitimes.com/",
        "EDGAR Online": "https://www.edgar-online.com/",
        "Energy Monitor": "https://www.energymonitor.ai/",
        "Entrepreneur: Stocks": "https://www.entrepreneur.com/topic/stocks",
        "ESG Dive": "https://www.esgdive.com/",
        "ETF Daily News": "https://etfdailynews.com/",
        "ETF Database": "https://etfdb.com/",
        "ETF Trends": "https://www.etftrends.com/",
        "etf.com": "https://www.etf.com/",
        "ETFguide": "https://www.etfguide.com/",
        "ETFguide.com": "https://www.etfguide.com/",
        "Evening Standard": "https://www.standard.co.uk/",
        "Exec Edge": "https://www.execedge.com/",
        "Facilities Dive": "https://www.facilitiesdive.com/",
        "Fashion Dive": "https://www.fashiondive.com/",
        "FastCompany": "https://www.fastcompany.com/",
        "FierceBiotech.com": "https://www.fiercebiotech.com/",
        "Financial Planning": "https://www.financial-planning.com/",
        "Financial Post": "https://financialpost.com/",
        "Financial Times": "https://www.ft.com/",
        "Food Dive": "https://www.fooddive.com/",
        "Food Manufacturing": "https://www.foodmanufacturing.com/",
        "Footwear News": "https://footwearnews.com/",
        "Forbes": "https://www.forbes.com/",
        "Forbes.com": "https://www.forbes.com/",
        "Forkast News": "https://forkast.news/",
        "Fortune": "https://fortune.com/",
        "Fox Business": "https://www.foxbusiness.com/",
        "Fox Business Videos": "https://www.foxbusiness.com/video",
        "FreightWaves": "https://www.freightwaves.com/",
        "FX Empire": "https://www.fxempire.com/",
        "GlobeNewswire": "https://www.globenewswire.com/",
        "GOBankingRates": "https://www.gobankingrates.com/",
        "Grocery Dive": "https://www.grocerydive.com/",
        "Gurufocus": "https://www.gurufocus.com/",
        "GuruFocus.com": "https://www.gurufocus.com/",
        "Hart Energy": "https://www.hartenergy.com/",
        "Healthcare Dive": "https://www.healthcaredive.com/",
        "Heatmap News": "https://heatmap.news/",
        "Higher Ed Dive": "https://www.highereddive.com/",
        "Hospital Management": "https://www.hospitalmanagement.net/",
        "Hotel Dive": "https://www.hoteldive.com/",
        "Hotel Management Network": "https://www.hotelmanagement-network.com/",
        "HousingWire": "https://www.housingwire.com/",
        "HR Dive": "https://www.hrdive.com/",
        "IEN": "https://www.ien.com/",
        "IndexUniverse.com": "https://www.indexuniverse.com/",
        "Indie Research": "https://www.indieresearch.com/",
        "Industrial Distribution": "https://www.inddist.com/",
        "Insider Monkey": "https://www.insidermonkey.com/",
        "International Accounting Bulletin": "https://www.internationalaccountingbulletin.com/",
        "Investing.com": "https://www.investing.com/",
        "Investment Monitor": "https://www.investmentmonitor.ai/",
        "Investopedia": "https://www.investopedia.com/",
        "InvestorPlace": "https://investorplace.com/",
        "Investor's Business Daily": "https://www.investors.com/",
        "Investor's Business Daily Video": "https://www.investors.com/category/research/ibd-videos/",
        "IPO-Edge.com": "https://ipo-edge.com/",
        "iSPYETF": "https://www.ispyetf.com/",
        "Just Auto": "https://www.just-auto.com/",
        "Just Drinks": "https://www.just-drinks.com/",
        "Just Food": "https://www.just-food.com/",
        "Just Style": "https://www.just-style.com/",
        "Kiplinger": "https://www.kiplinger.com/",
        "LA Times": "https://www.latimes.com/",
        "Leasing Life": "https://www.leasinglife.com/",
        "Legal Dive": "https://www.legaldive.com/",
        "Life Insurance International": "https://www.lifeinsuranceinternational.com/",
        "Manufacturing Dive": "https://www.manufacturingdive.com/",
        "Manufacturing.NET": "https://www.manufacturing.net/",
        "Market Exclusive": "https://marketexclusive.com/",
        "Market Realist": "https://marketrealist.com/",
        "Marketing Dive": "https://www.marketingdive.com/",
        "MarketWatch": "https://www.marketwatch.com/",
        "Medical Device Network": "https://www.medicaldevice-network.com/",
        "MedTech Dive": "https://www.medtechdive.com/",
        "Michael Santoli": "https://www.michael-santoli.com/",
        "Mining Technology": "https://www.mining-technology.com/",
        "Minyanville": "https://www.minyanville.com/",
        "Minyanville.com": "https://www.minyanville.com/",
        "Money": "https://money.com/",
        "MoneyShow": "https://www.moneyshow.com/",
        "Moneywise": "https://moneywise.com/",
        "Moody's": "https://www.moodys.com/",
        "Morningstar": "https://www.morningstar.com/",
        "Morningstar Research": "https://www.morningstar.com/research",
        "Morningstar.com": "https://www.morningstar.com/",
        "Motley Fool": "https://www.fool.com/",
        "MT Newswires": "https://www.mtnewswires.com/",
        "Multifamily Dive": "https://www.multifamilydive.com/",
        "Nation's Restaurant News": "https://www.nrn.com/",
        "New York Times": "https://www.nytimes.com/",
        "NewMediaWire": "https://newmediawire.com/",
        "News Direct": "https://newsdirect.com/",
        "Newsfile": "https://www.newsfilecorp.com/",
        "Observer": "https://observer.com/",
        "Offshore Technology": "https://www.offshore-technology.com/",
        "Oilprice.com": "https://oilprice.com/",
        "Packaging Dive": "https://www.packagingdive.com/",
        "Packaging Gateway": "https://www.packaging-gateway.com/",
        "paidContent.org": "https://www.paidcontent.org/",
        "Patently Apple": "https://www.patentlyapple.com/",
        "Payments Dive": "https://www.paymentsdive.com/",
        "Pharma Voice": "https://www.pharmavoice.com/",
        "Pharmaceutical Business Review": "https://www.pharmaceutical-business-review.com/",
        "Pharmaceutical Technology": "https://www.pharmaceutical-technology.com/",
        "Poets & Quants": "https://poetsandquants.com/",
        "POWER Magazine": "https://www.powermag.com/",
        "Power Technology": "https://www.power-technology.com/",
        "PR Newswire": "https://www.prnewswire.com/",
        "Private Banker International": "https://www.privatebankerinternational.com/",
        "PYMNTS": "https://www.pymnts.com/",
        "Quartz": "https://qz.com/",
        "Railway Technology": "https://www.railway-technology.com/",
        "RealMoney by TheStreet.com": "https://realmoney.thestreet.com/",
        "Restaurant Dive": "https://www.restaurantdive.com/",
        "Retail Banker International": "https://www.retailbankerinternational.com/",
        "Retail Dive": "https://www.retaildive.com/",
        "Retail Insight Network": "https://www.retail-insight-network.com/",
        "Reuters": "https://www.reuters.com/",
        "Reuters Videos": "https://www.reuters.com/video/",
        "Rigzone.com": "https://www.rigzone.com/",
        "RTT News": "https://www.rttnews.com/",
        "Schaeffer's Investment Research": "https://www.schaeffersresearch.com/",
        "Seeking Alpha": "https://seekingalpha.com/",
        "Ship Technology": "https://www.ship-technology.com/",
        "Silicon Alley Insider": "https://www.businessinsider.com/sai",
        "Simply Wall St.": "https://simplywall.st/",
        "Skift": "https://skift.com/",
        "SmartCities Dive": "https://www.smartcitiesdive.com/",
        "SmarterAnalyst": "https://www.smarteranalyst.com/",
        "SmartMoney": "https://www.wsj.com/news/types/smartmoney",
        "SmartMoney.com": "https://www.wsj.com/news/types/smartmoney",
        "Social Media Today": "https://www.socialmediatoday.com/",
        "Sourcing Journal": "https://sourcingjournal.com/",
        "South China Morning Post": "https://www.scmp.com/",
        "Sportico": "https://www.sportico.com/",
        "StockTwits": "https://stocktwits.com/",
        "Supermarket News": "https://www.supermarketnews.com/",
        "Supply Chain Dive": "https://www.supplychaindive.com/",
        "TechCrunch": "https://techcrunch.com/",
        "The Fly": "https://thefly.com/",
        "The Guardian": "https://www.theguardian.com/",
        "The Independent": "https://www.independent.co.uk/",
        "The Information": "https://www.theinformation.com/",
        "The Real Deal": "https://therealdeal.com/",
        "The Telegraph": "https://www.telegraph.co.uk/",
        "The Wall Street Journal": "https://www.wsj.com/",
        "The Wall Street Journal Online": "https://www.wsj.com/",
        "theflyonthewall.com": "https://thefly.com/",
        "TheStreet": "https://www.thestreet.com/",
        "TheStreet.com": "https://www.thestreet.com/",
        "TheStreet.com TV": "https://www.thestreet.com/video",
        "TipRanks": "https://www.tipranks.com/",
        "Transport Topics": "https://www.ttnews.com/",
        "Trucking Dive": "https://www.truckingdive.com/",
        "U.S.News & World Report": "https://www.usnews.com/",
        "USA TODAY": "https://www.usatoday.com/",
        "Utility Dive": "https://www.utilitydive.com/",
        "Verdict": "https://www.verdict.co.uk/",
        "Verdict Food Service": "https://www.verdictfoodservice.com/",
        "Wall Street Transcript": "https://www.twst.com/",
        "Washington Post": "https://www.washingtonpost.com/",
        "Waste Dive": "https://www.wastedive.com/",
        "World Construction Network": "https://www.worldconstructionnetwork.com/",
        "WSJ": "https://www.wsj.com/",
        "WWD": "https://wwd.com/",
        "Wyatt Investment Research": "https://www.wyattinvestmentresearch.com/",
        "Yahoo Finance": "https://finance.yahoo.com/",
        "Yahoo Finance Blogs": "https://finance.yahoo.com/news/",
        "Yahoo Finance Contributors": "https://finance.yahoo.com/contributors/",
        "Yahoo Finance UK": "https://uk.finance.yahoo.com/",
        "Yahoo Finance Video": "https://finance.yahoo.com/video/",
        "YCharts": "https://ycharts.com/",
        "Zacks": "https://www.zacks.com/",
        "Zacks Small Cap Research": "https://scr.zacks.com/"
    }
    
    # Create a list to store results
    results = []
    
    # Process each source name
    total = len(source_names)
    for i, source_name in enumerate(source_names):
        print(f"[{i+1}/{total}] Processing {source_name}...")
        
        # Look up URL in our dictionary
        if source_name in known_urls:
            url = known_urls[source_name]
        else:
            # For sources not in our dictionary, make a best guess
            # Remove special characters and spaces, add .com
            simplified_name = source_name.lower().replace(' ', '').replace('&', 'and')
            simplified_name = ''.join(c for c in simplified_name if c.isalnum() or c == '-')
            url = f"https://www.{simplified_name}.com"
            print(f"  - URL not in database, using best guess: {url}")
        
        # Add to results
        results.append({
            'Source Name': source_name,
            'URL': url
        })
    
    # Save to CSV
    df = pd.DataFrame(results)
    df.to_csv(output_csv_path, index=False)
    print(f"\nCompleted! All {total} sources processed and saved to {output_csv_path}")
    return results

def main():
    # List of news sources
    news_sources = [
        "24/7 Wall St.",
        "Above Avalon",
        "ACCESS Newswire",
        "ACCESSWIRE",
        "ACCESSWIRE Test RSS",
        "Agriculture Dive",
        "Air Cargo World",
        "American Banker",
        "American City Business Journals",
        "AP",
        "AP Finance",
        "AppleInsider",
        "Argus Research",
        "Associated Press",
        "Associated Press Finance",
        "Autoblog",
        "Automotive Dive",
        "Automotive News",
        "Banking Dive",
        "Barron's Online",
        "Barrons.com",
        "Benzinga",
        "Big Data Download",
        "BioPharma Dive",
        "bizjournals.com",
        "Black Enterprise",
        "Bloomberg",
        "Bloomberg Video",
        "Breakout",
        "Briefing.com",
        "Business Insider",
        "Business Wire",
        "BusinessWeek",
        "Capital Cube",
        "CCBN",
        "CFO Dive",
        "CFO.com",
        "Chain Store Age",
        "CIO Dive",
        "Clinical Trials Arena",
        "CNBC",
        "CNBC TV",
        "CNBC Videos",
        "CNN Business",
        "CNNMoney.com",
        "CoinDesk",
        "CoinMarketCap",
        "Commercial Observer",
        "Company Spotlight",
        "Construction Dive",
        "CorpGov.com",
        "C-Store Dive",
        "CX Dive",
        "Cybersecurity Dive",
        "DailyFX",
        "Deadline",
        "Design & Development Today",
        "DigiTimes",
        "EDGAR Online",
        "EDGAR Online Financials",
        "Electronic Payments",
        "Energy Monitor",
        "Entrepreneur: Stocks",
        "ESG Dive",
        "ETF Daily News",
        "ETF Database",
        "ETF Trends",
        "etf.com",
        "ETFguide",
        "ETFguide.com",
        "Evening Standard",
        "Exec Edge",
        "Facilities Dive",
        "Fashion Dive",
        "FastCompany",
        "FierceBiotech.com",
        "Financial Planning",
        "Financial Post",
        "Financial Times",
        "Food Dive",
        "Food Manufacturing",
        "Footwear News",
        "Forbes",
        "Forbes.com",
        "Forkast News",
        "Fortune",
        "Fox Business",
        "Fox Business Videos",
        "FreightWaves",
        "FX Empire",
        "GlobeNewswire",
        "GOBankingRates",
        "Grocery Dive",
        "Gurufocus",
        "GuruFocus.com",
        "Hart Energy",
        "Harvest Exchange",
        "Healthcare Dive",
        "Heatmap News",
        "Higher Ed Dive",
        "Hospital Management",
        "Hotel Dive",
        "Hotel Management Network",
        "HousingWire",
        "HR Dive",
        "IEN",
        "IndexUniverse.com",
        "Indie Research",
        "Industrial Distribution",
        "Insider Monkey",
        "International Accounting Bulletin",
        "Investing.com",
        "Investment Monitor",
        "Investopedia",
        "InvestorPlace",
        "Investor's Business Daily",
        "Investor's Business Daily Video",
        "IPO-Edge.com",
        "iSPYETF",
        "Just Auto",
        "Just Drinks",
        "Just Food",
        "Just Style",
        "Kiplinger",
        "LA Times",
        "Leasing Life",
        "Legal Dive",
        "Life Insurance International",
        "Manufacturing Dive",
        "Manufacturing.NET",
        "Market Exclusive",
        "Market Realist",
        "Marketing Dive",
        "MarketWatch",
        "Marketwire",
        "Marketwired",
        "Markit",
        "Medical Device Network",
        "MedTech Dive",
        "Michael Santoli",
        "Mining Technology",
        "Minyanville",
        "Minyanville.com",
        "Money",
        "MoneyShow",
        "Moneywise",
        "Moody's",
        "Morningstar",
        "Morningstar Research",
        "Morningstar.com",
        "Motley Fool",
        "Motor Finance",
        "MT Newswires",
        "Multifamily Dive",
        "Nation's Restaurant News",
        "New York Times",
        "NewMediaWire",
        "News Direct",
        "Newsfile",
        "Nicole Sinclair",
        "noodls",
        "Observer",
        "Offshore Technology",
        "Oilprice.com",
        "Optionetics",
        "optionMONSTER",
        "Packaging Dive",
        "Packaging Gateway",
        "paidContent.org",
        "Patently Apple",
        "Payments Dive",
        "Pharma Voice",
        "Pharmaceutical Business Review",
        "Pharmaceutical Technology",
        "Poets & Quants",
        "POWER Magazine",
        "Power Technology",
        "PR Newswire",
        "Private Banker International",
        "PYMNTS",
        "Quartz",
        "Railway Technology",
        "Rayhanul Ibrahim",
        "RealMoney by TheStreet.com",
        "Restaurant Dive",
        "Retail Banker International",
        "Retail Dive",
        "Retail Insight Network",
        "Reuters",
        "Reuters Videos",
        "Rigzone.com",
        "RTT News",
        "Sam Ro",
        "Schaeffer's Investment Research",
        "Seeking Alpha",
        "Ship Technology",
        "Silicon Alley Insider",
        "Simply Wall St.",
        "Skift",
        "SmallCapInvestor.com",
        "SmartCities Dive",
        "SmarterAnalyst",
        "SmartMoney",
        "SmartMoney.com",
        "Social Media Today",
        "Sourcing Journal",
        "South China Morning Post",
        "Sportico",
        "StarMine",
        "StockStory",
        "StockTwits",
        "StreetAuthority Network",
        "Supermarket News",
        "Supply Chain Dive",
        "Talking Numbers",
        "TechCrunch",
        "TechTicker",
        "TEST Business Wire Releases",
        "Test Provider for Finance",
        "The Accountant",
        "The Basis Point",
        "The Daily Ticker",
        "The Exchange",
        "The Fly",
        "The Guardian",
        "The Independent",
        "The Information",
        "The Real Deal",
        "The StreetAuthority Network",
        "The Telegraph",
        "The Wall Street Journal",
        "The Wall Street Journal Online",
        "theflyonthewall.com",
        "TheStreet",
        "TheStreet.com",
        "TheStreet.com TV",
        "Thomson Reuters StreetEvents",
        "TipRanks",
        "TradingMarkets.com",
        "Transport Topics",
        "Trucking Dive",
        "U.S.News & World Report",
        "USA TODAY",
        "Utility Dive",
        "Verdict",
        "Verdict Food Service",
        "Wall St. Cheat Sheet",
        "Wall Street Transcript",
        "Washington Post",
        "Waste Dive",
        "WILink",
        "World Construction Network",
        "WSJ",
        "WWD",
        "Wyatt Investment Research",
        "Yahoo Finance",
        "Yahoo Finance Blogs",
        "Yahoo Finance Contributors",
        "Yahoo Finance UK",
        "Yahoo Finance Video",
        "YCharts",
        "Zacks",
        "Zacks Small Cap Research"
    ]
    
    # Set up output path
    logs_dir = r"C:\Users\spenc\Downloads\Dev Files\News_Algo\logs"
    ensure_directory_exists(logs_dir)
    output_csv = os.path.join(logs_dir, "news_sources_urls.csv")
    
    # Get URLs and save to CSV
    get_news_source_urls(news_sources, output_csv)
    
    print(f"CSV file saved to: {output_csv}")

if __name__ == "__main__":
    main() 